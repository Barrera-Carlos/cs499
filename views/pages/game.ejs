<!DOCTYPE html>
<html>
<head>
    <% include ../partials/header.ejs %>
</head>

<body onload = "roomSelect()">

<p id="testP"></p>

<p id="totalBets">All players bets:</p>

<p id="room name" >Room name: <%= roomId %> </p>

<ul id="trumpOnBoard" style="list-style-type: none"></ul>

<form id="betForm">
    Trick Bet:
    <input type="number" name="trickBet" id="betInput" title="form input used for betting">
    <button type="button" onclick="checkForm()">Make a Bet</button>
</form>

<ul id="cardOnBoard" style="list-style-type: none"></ul>

<ul id="cardsInHand" style="list-style-type: none"></ul>

<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>

    const socket = io();
    let playerName;
    let roomName
    let trumpCard;
    let round = 10;
    let fullDeck ;
    let hand ;
    let boardCards = {
        suit: null,
        cardsOnBoard: []
    }

    function addCardToBoard(cardAndSenderString) {
        let cardObj = JSON.parse(cardAndSenderString);
        let boardTag = document.getElementById('cardOnBoard');

        let liNode = document.createElement("LI");
        let myImg = new Image(150,200);
        myImg.src = cardObj.card.cardImgLocation;
        myImg.id = String(cardObj.card.number) + String(cardObj.card.suit);
        liNode.appendChild(myImg);
        boardTag.appendChild(liNode);

        boardCards.cardsOnBoard.push(cardObj);
        if(boardCards.cardsOnBoard.length === 5){
            //calculate who won
        }
    }

    function deleteCardFromHand(cardId) {
        let card = document.getElementById(cardId);
        card.parentNode.removeChild(card);
    }

    function checkCard(chosenCard){
         if (boardCards.suit === null){
             return true;
         }
         else if(chosenCard.suit === boardCards.suit){
             return true;
         }
         else{
             let tellingTheTruth = true;
             for(let i = 0; i < hand.pHand.length; i++){
                 if(hand.pHand[i].suit === boardCards.suit){
                     tellingTheTruth = false;
                 }
             }

             return tellingTheTruth;
         }
    }

    function cardSelected(playerNumber, cardString) {
       if(playerName.turnToPlay) {
           playerName.turnToPlay = false;

           let cardChosen = JSON.parse(cardString);
           let cardId = String(cardChosen.number) + String(cardChosen.suit);

           if(!checkCard(cardChosen)){
               alert("sorry the card that you have chosen does not follow suit");
               playerNumber.turnToPlay = true;
           }
           else {
               if(boardCards.cardsOnBoard.length === 0){
                   boardCards.suit = cardChosen.suit;
               }

               deleteCardFromHand(cardId);

               let cardAndSenderObj = {
                   senderNumber: Number(playerNumber),
                   card: cardChosen
               }

               let cAndSString = JSON.stringify(cardAndSenderObj);

               socket.emit('addingCardToBoard', cAndSString);
               socket.emit('whoCanPlayCard', String((playerName.playerNumber%4)+1), roomName);
               //
           }

       }
    }

    function placeBet(betVal){

        if( !playerName.isDealer ){
            playerName.chosenTrickNumber = betVal;

            document.getElementById("betForm").style.visibility = "hidden";
            document.getElementById("testP").innerHTML = "your trick bet for this round is: " + String(betVal);

            playerName.totalTrickByAllPlayers += playerName.chosenTrickNumber;
            let totalNum = playerName.totalTrickByAllPlayers
            socket.emit('allPlayersBets', String(playerName.playerNumber), String( playerName.chosenTrickNumber), roomName);
            socket.emit('TrickBet', String(playerName.playerNumber), String(totalNum), roomName);
        }
        else {
            if((betVal + playerName.totalTrickByAllPlayers) === round){
                alert("sorry your bet equals to the number of rounds")
            }
            else {
                playerName.chosenTrickNumber = betVal;

                document.getElementById("testP").innerHTML = "your trick bet for this round is: " + String(betVal);

                document.getElementById("betForm").style.visibility = "hidden";

                socket.emit('allPlayersBets', String(playerName.playerNumber), String( playerName.chosenTrickNumber), roomName);
                socket.emit('whoCanPlayCard', String(whoStartedTrickBet()), roomName);
            }
        }
    }

    function checkForm() {
        let betValue = Number(document.getElementById("betInput").value);
        //document.getElementById("testP").innerHTML = "your trick bet for this round is: " + String(betValue);
        if(betValue > round || betValue < 0){
            alert("your bet is to big or to small for this round");
        }
        else
            placeBet(betValue);
    }

    function whoStartedTrickBet(){
        switch (round) {
            case 10:
                return 2
            case 9:
                return 3
            case 8:
                return 4
            case 7:
                return 1
            case 6:
                return 2
            case 5:
                return 3
            case 4:
                return 4
            case 3:
                return 1
            case 2:
                return 2
            case 1:
                return 3

        }
    }

    function showHandToPlayer() {
        let handTag = document.getElementById("cardsInHand");
        let trumpLocation = document.getElementById("trumpOnBoard");
        //document.getElementById("trumpCard").src = trumpCard.cardImgLocation;

        let tLiNode = document.createElement("LI");
        let trumpCrdIm = new Image(150,200);
        trumpCrdIm.src = trumpCard.cardImgLocation;
        tLiNode.appendChild(trumpCrdIm);
        trumpLocation.appendChild(tLiNode);


        for(let i = 0; i < hand.pHand.length; i++){



            let liNode = document.createElement("LI");
            let myImg = new Image(150,200);
            myImg.src = hand.pHand[i].cardImgLocation;
            myImg.onclick = function(){ cardSelected(String(playerName.playerNumber),JSON.stringify(hand.pHand[i]))};
            myImg.id = String(hand.pHand[i].number) + String(hand.pHand[i].suit);
            liNode.appendChild(myImg);
            handTag.appendChild(liNode);
        }

        if(playerName.playerNumber === whoStartedTrickBet()){
            document.getElementById("betForm").style.visibility = "visible";
        }

    }
    
    /*function addHandToBoard() {
        
    }*/
    
    function createDeck() {
        var suitName = ["diamond", "club", "heart", "spade"];
        var count = 0;
        var cardInitial
        fullDeck = [];

        for(count; count < 4; count++) {

            for (let i = 1; i < 14; i++) {

                if( i >= 10){
                    switch (i + 1) {
                        case 11:
                            cardInitial = "J";
                            break;
                        case 12:
                            cardInitial = "Q";
                            break;
                        case 13:
                            cardInitial = "K";
                            break;
                        case 14:
                            cardInitial = "A";

                    }
                }
                else {
                    cardInitial = String(i+1);
                }
                var card = {
                    number: (i % 14) + 1,
                    suit: suitName[count],
                    cardImgLocation: "/Deck/"+cardInitial+suitName[count]+ ".png"
                }

                fullDeck.push(card);
            }
        }
    }

    function shuffleDeck() {
        var currentIndex = fullDeck.length, temporaryValue, randomIndex;

        // While there remain elements to shuffle...
        while (0 !== currentIndex) {

            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            // And swap it with the current element.
            temporaryValue = fullDeck[currentIndex];
            fullDeck[currentIndex] = fullDeck[randomIndex];
            fullDeck[randomIndex] = temporaryValue
        }
    }

    function deal(myNumber) {

        var myHand = {
            userNumber: 1,
            pHand : []
        }

        var firstHand = {
            userNumber: 2,
            pHand : []
        }

        var secondHand = {
            userNumber: 3,
            pHand : []
        }

        var thirdHand = {
            userNumber: 4,
            pHand : []
        }

        var handCount;
        for (let i = 51, j = 1 ; i > (51 - (round * 4)); --i, ++j){

            handCount = (myNumber + j) % 4;

            switch (handCount) {
                case (myNumber + 1) % 4:
                    firstHand.pHand.push(fullDeck[i]);
                    break;
                case (myNumber + 2) % 4:
                    secondHand.pHand.push(fullDeck[i]);
                    break;
                case (myNumber + 3) % 4:
                    thirdHand.pHand.push(fullDeck[i]);
                    break;
                case myNumber % 4:
                    myHand.pHand.push(fullDeck[i]);
            }
        }



        trumpCard = fullDeck[(51 - (round * 4))]

        let trumpCardString = JSON.stringify(trumpCard);
        let firstHandString = JSON.stringify(firstHand);
        let secondHandString = JSON.stringify(secondHand);
        let thirdHandString = JSON.stringify(thirdHand);
        let handString = JSON.stringify(myHand);

        let delArr = [trumpCardString,firstHandString,secondHandString, thirdHandString, handString];

        socket.emit('deal', JSON.stringify(delArr), roomName);
        //socket.emit('deal', JSON.stringify(fullDeck));
    }
    
    function createPlayer (playerNum){
        playerName = {
            playerNumber : playerNum,
            isDealer : false,
            turnToPlay : false,
            turnToSetTrick: false,
            chosenTrickNumber : 0,
            wonTricksInRound : 0,
            totalPoints : 0,
            totalTrickByAllPlayers: 0
        };
    }

    /**
     * this function retrives the poster room name and sends it to
     * the server
     */
    function roomSelect(){
        //gets the room name given by logIns.ejs post.
        let roomNameTag = document.getElementById("room name");
        roomName = String(roomNameTag.textContent);

        //sends room name to the server
        socket.emit('join', roomName);


    }

    /**
     * after the server receives the room name, it returns the users
     * room number 1-4.
     */
    socket.on('join', (msg) => {
        // msg should be tested if its in the correct range of 1-4;
        //document.getElementById("testP").innerHTML = String(msg);

        createPlayer(Number(msg));

        if(playerName.playerNumber === 1)
            playerName.isDealer = true;

        createDeck();
        shuffleDeck();


        if(playerName.playerNumber === 4){
            socket.emit('startDeal', roomName, "all players have connected");
        }

    });

    socket.on('startDeal', (allConnected) => {
        if(playerName.isDealer && allConnected) {
            deal(playerName.playerNumber, round);
        }

    });

    socket.on('deal', (jsonDealString) => {


        let fullDel = JSON.parse(jsonDealString);

        for (let i = 0; i < fullDel.length; i++){
            if(i === 0){

                trumpCard = JSON.parse(fullDel[i]);
            }
            else{
                let givenHand = JSON.parse(fullDel[i]);

                if(givenHand.userNumber === playerName.playerNumber){
                    hand = JSON.parse(fullDel[i]);
                    //call function to display cards in array
                }
            }
        }

        showHandToPlayer(trumpCard);
    });

    socket.on('TrickBet', (pastPlayerNumberString, tricksBetByAllPlayersString) => {

       if(playerName.playerNumber === ((Number(pastPlayerNumberString)) % 4) + 1){
           playerName.totalTrickByAllPlayers += Number(tricksBetByAllPlayersString);
           //document.getElementById("totalBets").innerHTML = "all bets have added up to: " + String(playerName.totalTrickByAllPlayers);
           document.getElementById("betForm").style.visibility = "visible";
       }
    });

    socket.on('allPlayersBets', (pastPlayerNumberString, lastPlayerBet) => {
        let playerBet = " (P:" +  pastPlayerNumberString + "|B:" + lastPlayerBet + ")"
        let betsOfPlayers = document.getElementById("totalBets");
        betsOfPlayers.textContent += playerBet;
    });

    socket.on('whoCanPlayCard', (userWhoCanBet) => {
        if(playerName.playerNumber === Number(userWhoCanBet)){
            playerName.turnToPlay = true;
            alert("you can now choose a card to play");
        }
    });

    socket.on('addingCardToBoard', (cardAndSenderString) => {
        addCardToBoard(cardAndSenderString);
    });


</script>

</body>
</html>