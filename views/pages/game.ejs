<!DOCTYPE html>
<html>
<head>
    <% include ../partials/header.ejs %>
</head>

<body onload = "roomSelect()">
<p id="room name" ><%= roomId %></p>
<p id="testP">test did not work</p>

<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>

    const socket = io();
    let playerName;
    let roomName


    function createPlayer (playerNum){
        playerName = {
            //Properties
            playerNumber : playerNum,
            isDealer : false,
            roundNumber : 10,
            fullDeck : null ,
            hand: null,
            turnToPlay : false,
            chosenNumOfTricks : 0,
            wonTricksInRound : 0,
            totalPoints : 0,

            //Methods

            getFullDeck : () => {

                var suitName = ["diamond", "club", "heart", "spade"];
                var count = 0;
                this.fullDeck = [];


                for (let i = 0; i < 52; i++){

                    if((i%13) === 0 && i > 0){
                        count + 1;
                    }

                    var card = {
                        number : (i % 13) + 2,
                        suit : suitName[count]
                    }

                    this.fullDeck.push(card);
                }

            },

            shuffleDeck : () => {
                var currentIndex = this.fullDeck.length, temporaryValue, randomIndex;

                // While there remain elements to shuffle...
                while (0 !== currentIndex) {

                    // Pick a remaining element...
                    randomIndex = Math.floor(Math.random() * currentIndex);
                    currentIndex -= 1;

                    // And swap it with the current element.
                    temporaryValue = this.fullDeck.length[currentIndex];
                    this.fullDeck.length[currentIndex] = this.fullDeck.length[randomIndex];
                    this.fullDeck.length[randomIndex] = temporaryValue
                }
            },

            /**
             *  need to decide where new hand is going to come form
             *  gotm server of obj.
             * @param newHand
             */

            setHand : (newHand) =>{
                this.hand = newHand;
            },

            getHand : () =>{
                return this.hand;
            },

            deal : (myNumber) =>{

                this.hand = [];

                var firstHand = {
                    userNumber: (myNumber % 4) + 1,
                    pHand : []
                }

                var secondHand = {
                    userNumber: (myNumber % 4) + 2,
                    pHand : []
                }

                var thirdHand = {
                    userNumber: (myNumber % 4) + 3,
                    pHand : []
                }

                for (let i = 51, j = 1 ; i >= (51 - (myNumber * 4)); --i, ++j){

                    let handCount = (myNumber + j) % 4;

                    switch (handCount) {
                        case (myNumber + 1) % 4:
                            firstHand.pHand.push(this.fullDeck.length);
                            break;
                        case (myNumber + 2) % 4:
                            secondHand.pHand.push(this.fullDeck.length);
                            break;
                        case (myNumber + 3) % 4:
                            thirdHand.pHand.push(this.fullDeck.length);
                            break;
                        case myNumber % 4:
                            this.hand.push(this.fullDeck.length);
                    }
                }

                let array1String = JSON.stringify(firstHand);
                let array2String = JSON.stringify(secondHand);
                let array3String = JSON.stringify(thirdHand);

                socket.emit('deal', JSON.stringify(myNumber), array1String);
            },

            playCard : (card) => {
                //socket.emit('card', card);
            },

            setTotalPoints : (points) => {
                this.totalPoints += points;
            },

            getTotalPoints : () => {
                return this.totalPoints;
            },

            gitTotalPointsBonus : (points) => {
                this.totalPoints += points;
            },

            decRoundNumber : () => {
                this.roundNumber -= 1;
            }
        };
    }

    /**
     * this function retrives the poster room name and sends it to
     * the server
     */
    function roomSelect(){
        //gets the room name given by logIns.ejs post.
        roomName = document.getElementById("room name");
        let roomNumString = String(roomName.textContent);

        //sends room name to the server
        socket.emit('join', roomNumString);


    }

    /**
     * after the server receives the room name, it returns the users
     * room number 1-4.
     */
    socket.on('join', (msg) => {
        // msg should be tested if its in the correct range of 1-4;
        document.getElementById("testP").innerHTML = String(msg);

        createPlayer(Number(msg));
        playerName.getFullDeck();
        playerName.shuffleDeck();

        playerName.deal(playerName.playerNumber, playerName.fullDeck);

    });


</script>
</body>
</html>