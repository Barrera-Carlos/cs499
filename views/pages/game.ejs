<!DOCTYPE html>
<html>
<head>
    <% include ../partials/header.ejs %>
</head>

<body onload = "roomSelect()">
<p id="room name" ><%= roomId %></p>
<p id="testP">test did not work</p>

<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>

    const socket = io();
    let playerName;

    function createDeck(fullDeck) {

        let suitName = ["diamond", "club", "heart", "spade"];
        var count = 0;

        for (let i = 0; i < 52; i++){

            if((i%13) === 0 && i > 0){
                count + 1;
            }

            let card = {
                number : (i % 13) + 2,
                suit : suitName[count]
            }


            fullDeck.push(card);
        }
    }

    function shuffleDeck(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }
    }

    function createPlayer (playerNum){
        playerName = {
            //Properties
            playerNumber : playerNum,
            isDealer : false,
            roundNumber : 10,
            fullDeck : [],
            hand: ["test"],
            turnToPlay : false,
            chosenNumOfTricks : 0,
            wonTricksInRound : 0,
            totalPoints : 0,

            //Methods

            getFullDeck : () => {
                createDeck(this.fullDeck);
            },

            /**
             *  need to decide where new hand is going to come form
             *  gotm server of obj.
             * @param newHand
             */

            setHand : (newHand) =>{
                this.hand = newHand;
            },

            getHand : () =>{
                return this.hand;
            },

            Deal : () =>{
                //this will be updated once deck function is finished
                let fullDeck = shuffleDeck();
            },

            playCard : (card) => {
                socket.emit('card', card);
            },

            setTotalPoints : (points) => {
                this.totalPoints += points;
            },

            getTotalPoints : () => {
                return this.totalPoints;
            },

            gitTotalPointsBonus : (points) => {
                this.totalPoints += points;
            }
        };
    }

    function roomSelect(){
        let roomNumber = document.getElementById("room name");
        let roomNumString = String(roomNumber.textContent);
        socket.emit('join', roomNumString);


    }

    socket.on('join', (msg) => {
        // msg should be tested if its in the correct range of 1-4;
        document.getElementById("room name").innerHTML = String(msg);

        createPlayer(msg);
        playerName.getFullDeck();

    });


</script>
</body>
</html>